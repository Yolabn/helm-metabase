# values.yaml - Configuración por defecto para Metabase

# --- Configuración General ---
replicaCount: 1

# --- Configuración de la Imagen ---
image:
  registry: docker.io
  repository: metabase/metabase
  tag: "v0.50.0"  # ✅ CORREGIDO: Versión específica en lugar de 'latest'
  pullPolicy: IfNotPresent
  pullSecrets: []

# --- Configuración del Servicio ---
service:
  type: ClusterIP
  port: 3000
  targetPort: 3000
  annotations: {}

# --- Configuración de Ingress ---
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: metabase.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# --- Configuración de Recursos ---
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

# --- Configuración de la Base de Datos ---
database:
  type: postgres
  
  # Clave de encriptación para Metabase (generar con: openssl rand -base64 32)
  encryptionKey: "X1/rDuIWc+KbT2hjncAywknQJcT2yPL2ir7Lwf8Y+T8="
  
  # Configuración para usar Secret existente
  existingSecret: "metabase-database"
  
  # Configuración de conexión a PostgreSQL
  host: "postgresql.default.svc.cluster.local"  # ✅ CONFIGURABLE: Cambiar según tu entorno
  port: 5432
  dbname: "metabase"
  username: "postgres"
  password: ""  # Se obtiene del Secret

# --- Variables de Entorno Adicionales ---
env:
  - name: MB_DB_TYPE
    value: postgres
  - name: MB_DB_HOST
    value: "{{ .Values.database.host }}"
  - name: MB_DB_PORT
    value: "{{ .Values.database.port }}"
  - name: MB_DB_DBNAME
    value: "{{ .Values.database.dbname }}"
  - name: MB_DB_USER
    valueFrom:
      secretKeyRef:
        name: "{{ .Values.database.existingSecret }}"
        key: user
  - name: MB_DB_PASS
    valueFrom:
      secretKeyRef:
        name: "{{ .Values.database.existingSecret }}"
        key: password
  - name: MB_ENCRYPTION_SECRET_KEY
    value: "{{ .Values.database.encryptionKey }}"

# --- Configuración de Health Checks ---
livenessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 120
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# --- Configuración de Nodos ---
nodeSelector: {}
tolerations: []
affinity: {}

# --- Configuración de Seguridad ---
podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 2000

# --- Configuración de Persistencia ---
persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 8Gi

# --- Configuración de ServiceAccount ---
serviceAccount:
  create: true
  annotations: {}
  name: ""

# --- Configuración de Autoscaling ---
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
